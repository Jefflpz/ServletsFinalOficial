Index: src/main/java/org/example/crud_site/dao/AdmDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.crud_site.dao;\r\n\r\n// Importando a classe Adm para usar os seus atributos e métodos.\r\n\r\nimport org.example.crud_site.model.Adm;\r\n\r\n//importando a classe SQLException para tratar os erros de SQL.\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\n// Importando a classe ArrayList para criar uma lista de administradores\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n// Importando a classe UUID para usar nos ids.\r\nimport java.util.UUID;\r\n\r\n//Classe AdmDAO\r\npublic class AdmDAO{\r\n\r\n    // objeto que acessa os atributos que gerenciam o banco de dados\r\n    private Conexao conexao;\r\n\r\n    //Construtor atribui a conexao uma nova Conexao() com os atribuitos da classe Conexao.\r\n    public AdmDAO() {\r\n        conexao = new Conexao();\r\n    }\r\n\r\n    // Método para inserir um novo registro na tabala Adm\r\n    public boolean inserirAdm(String username, String senha) {\r\n\r\n        conexao.conectar();\r\n        try (PreparedStatement pstmt = conexao.getConn().prepareStatement(\"INSERT INTO adm (username, senha) VALUES (?,?)\")){\r\n\r\n            // Define os valores dos parâmetros da consulta\r\n            pstmt.setString(1, username);\r\n            pstmt.setString(2, senha);\r\n\r\n            return pstmt.executeUpdate() > 0;\r\n\r\n        }catch (SQLException e) {\r\n            return false;\r\n        }finally {\r\n            conexao.desconectar();\r\n        }\r\n    }\r\n\r\n    // Método para alterar a senha de um administrador na tabela Adm\r\n    public boolean alterarSenhaAdm(String novaSenha, UUID id) {\r\n        conexao.conectar();\r\n        try (PreparedStatement pstmt = conexao.getConn().prepareStatement(\"UPDATE adm SET senha=? WHERE id=?\")){\r\n\r\n            // Define os valores dos parâmetros na consulta SQL\r\n            pstmt.setString(1, novaSenha);\r\n            pstmt.setObject(2, id);\r\n\r\n            // Executa a instrução SQL.\r\n            int rows = pstmt.executeUpdate();\r\n\r\n            // Verifica se a instrução SQL alterou algum registro.\r\n            if (rows == 0) {\r\n                throw new RuntimeException(\"Nenhum registro encontrado.\");\r\n            }\r\n            // retorna true se a quantidade\r\n            return rows > 0;\r\n        }catch (SQLException e){\r\n            return false;\r\n        }finally {\r\n            conexao.desconectar();\r\n        }\r\n    }\r\n\r\n    // Método para alterar o login de um administrador na tabela Adm\r\n    public boolean alterarLoginAdm(String novoUsername, UUID id) {\r\n        conexao.conectar();\r\n        try (PreparedStatement pstmt = conexao.getConn().prepareStatement(\"UPDATE adm SET username=? WHERE id = ?\")) {\r\n\r\n            // Define os valores dos parâmetros na consulta SQL\r\n            pstmt.setString(1, novoUsername);\r\n            pstmt.setObject(2, id);\r\n\r\n            // Executa a instrução SQL.\r\n            int rows = pstmt.executeUpdate();\r\n\r\n            // Verifica se a instrução SQL alterou algum registro.\r\n            if (rows == 0) {\r\n                throw new RuntimeException(\"Nenhum registro encontrado.\");\r\n            }\r\n            return rows > 0;\r\n        }catch (SQLException e){\r\n            return false;\r\n        }finally {\r\n            conexao.desconectar();\r\n        }\r\n    }\r\n\r\n\r\n    // Método para excluir um administrador na tabela Adm\r\n    public boolean excluirAdm(UUID id) {\r\n        conexao.conectar();\r\n        try (PreparedStatement pstmt = conexao.getConn().prepareStatement(\"DELETE FROM adm WHERE id = ?\")){\r\n            // Primeiro, obtemos o nome do usuário associado ao administrador que será excluído\r\n\r\n            pstmt.setObject(1, id);\r\n            return  pstmt.execute();\r\n\r\n        } catch (SQLException e) {\r\n            return false;\r\n        } finally {\r\n            conexao.desconectar();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // Método para buscar um administrador na tabela Adm\r\n    public Adm buscarAdm(String username){\r\n        conexao.conectar();\r\n\r\n        try (PreparedStatement pstmt = conexao.getConn().prepareStatement(\"SELECT * FROM adm WHERE username = ?\");\r\n        ) {\r\n\r\n            pstmt.setString(1, username);\r\n\r\n            // Armazena o resultado da consulta no objeto ResultSet\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            /// Obtem os dados do ResultSet\r\n            if (rs.next()) {\r\n                UUID id = (UUID) rs.getObject(1);\r\n                String login = rs.getString(2);\r\n                String senha = rs.getString(3);\r\n\r\n                // Cria um objeto Adm com os dados do ResultSet\r\n                return new Adm(id,login, senha);\r\n            }\r\n            return null;\r\n        }catch (SQLException e) {\r\n            // Retorna null caso ocorra algum erro.\r\n            return null;\r\n        }finally {\r\n            conexao.desconectar();\r\n        }\r\n    }\r\n\r\n    // Método para buscar um administrador na tabela Adm\r\n    public Adm buscarAdm(String username, String senha){\r\n        conexao.conectar();\r\n\r\n        try (PreparedStatement pstmt = conexao.getConn().prepareStatement(\"SELECT * FROM adm WHERE username = ? AND senha = ?\")){\r\n\r\n            pstmt.setString(1, username);\r\n            pstmt.setString(2, senha);\r\n\r\n            // Armazena o resultado da consulta no objeto ResultSet\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            /// Obtem os dados do ResultSet\r\n            if (rs.next()) {\r\n                UUID id = (UUID) rs.getObject(1);\r\n                String login = rs.getString(2);\r\n                String senhaAtualizada = rs.getString(3);\r\n\r\n                // Cria um objeto Adm com os dados do ResultSet\r\n                return new Adm(id,login, senhaAtualizada);\r\n            }\r\n            return null;\r\n        }catch (SQLException e) {\r\n            // Retorna null caso ocorra algum erro.\r\n            return null;\r\n        }finally {\r\n            conexao.desconectar();\r\n        }\r\n    }\r\n\r\n    // Método para listar todos os administradores na tabela Adm\r\n    public List<Adm> listarAdms(){\r\n\r\n\r\n        // Essa linha cria uma lista vazia chamada adms, pronta para armazenar objetos do tipo Adm.\r\n        // Usamos o ArrayList para faciliar a manipulação da lista.\r\n        List<Adm> adms = new ArrayList<>();\r\n\r\n        conexao.conectar();\r\n\r\n        try (PreparedStatement pstmt = conexao.getConn().prepareStatement(\"SELECT * FROM adm\")){\r\n\r\n            // Prepara a instrução SQL para executar a consulta.\r\n\r\n            // Armazena o resultado da consulta no objeto ResultSet.\r\n            ResultSet rs = pstmt.executeQuery();\r\n\r\n            // Obtem os dados do ResultSet e armazena na lista de administradores.\r\n            // Usamos o while para percorrer o ResultSet caso haja mais de um registro.\r\n            while (rs.next()) {\r\n\r\n                // Pega os dados do ResultSet\r\n                UUID id = (UUID) rs.getObject(1);\r\n                String login = rs.getString(2);\r\n                String senha = rs.getString(3);\r\n\r\n                // Cria um objeto Adm com os dados do ResultSet\r\n                Adm adm = new Adm(id, login, senha);\r\n\r\n                // Adiciona o objeto Adm na lista de administradores\r\n                adms.add(adm);\r\n            }\r\n        }catch (SQLException e) {\r\n\r\n            // Retorna null caso ocorra algum erro.\r\n            return null;\r\n        }finally {\r\n            conexao.desconectar();\r\n        }\r\n\r\n        // Retorna a lista de administradores\r\n        return adms;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/crud_site/dao/AdmDAO.java b/src/main/java/org/example/crud_site/dao/AdmDAO.java
--- a/src/main/java/org/example/crud_site/dao/AdmDAO.java	(revision 4cc3530a167488268214da1b65cf2597328fd363)
+++ b/src/main/java/org/example/crud_site/dao/AdmDAO.java	(date 1730913233218)
@@ -30,8 +30,8 @@
     // Método para inserir um novo registro na tabala Adm
     public boolean inserirAdm(String username, String senha) {
 
-        conexao.conectar();
         try (PreparedStatement pstmt = conexao.getConn().prepareStatement("INSERT INTO adm (username, senha) VALUES (?,?)")){
+            conexao.conectar();
 
             // Define os valores dos parâmetros da consulta
             pstmt.setString(1, username);
